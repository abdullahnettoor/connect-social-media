// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/abdullahnettoor/connect-social-media/internal/config"
	"github.com/abdullahnettoor/connect-social-media/internal/infrastructure/db"
	"github.com/abdullahnettoor/connect-social-media/internal/infrastructure/server"
	"github.com/abdullahnettoor/connect-social-media/internal/infrastructure/server/handlers"
	"github.com/abdullahnettoor/connect-social-media/internal/repo"
	"github.com/abdullahnettoor/connect-social-media/internal/usecase"
	"github.com/abdullahnettoor/connect-social-media/pkg/image_uploader"
)

// Injectors from wire.go:

func InitializeAPI(cfg *config.Config) (*server.ServeHttp, error) {
	driverWithContext, err := db.ConnectDb(cfg)
	if err != nil {
		return nil, err
	}
	userRepositoryInterface := repo.NewUserRepository(driverWithContext)
	userUseCase := usecase.NewUserUseCase(userRepositoryInterface)
	userHandler := handlers.NewUserHandler(userUseCase)
	adminRepository := repo.NewAdminRepository(driverWithContext)
	adminUseCase := usecase.NewAdminUseCase(adminRepository, userRepositoryInterface)
	adminHandler := handlers.NewAdminHandler(adminUseCase)
	postRepository := repo.NewPostRepository(driverWithContext)
	cloudinary, err := imgupload.ConnectCloudinary(cfg)
	if err != nil {
		return nil, err
	}
	contentRepository := repo.NewContentRepository(cloudinary)
	postUseCase := usecase.NewPostUseCase(postRepository, contentRepository)
	postHandler := handlers.NewPostHandler(postUseCase)
	commentRepository := repo.NewCommentRepository(driverWithContext)
	commentUseCase := usecase.NewCommentUseCase(commentRepository, contentRepository)
	commentHandler := handlers.NewCommentHandler(commentUseCase)
	chatRepositoryInterface := repo.NewChatRepository(driverWithContext)
	chatUseCase := usecase.NewChatUseCase(chatRepositoryInterface)
	chatHandler := handlers.NewChatHandler(chatUseCase)
	webSocketConnection := handlers.NewWebsocketHandler(chatUseCase)
	serveHttp := server.NewServeHttp(userHandler, adminHandler, postHandler, commentHandler, chatHandler, webSocketConnection)
	return serveHttp, nil
}
